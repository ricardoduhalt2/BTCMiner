import * as dotenv from 'dotenv';
import { ethers } from 'ethers';
import { JsonRpcProvider, Wallet, formatEther } from 'ethers';
import * as fs from 'fs';
import * as path from 'path';

dotenv.config();

// Lista de variables de entorno requeridas
const requiredEnvVars = [
  'PRIVATE_KEY',
  'SEPOLIA_RPC_URL',
  'BSC_TESTNET_RPC_URL',
  'BASE_SEPOLIA_RPC_URL',
  'ETHERSCAN_API_KEY',
  'BSCSCAN_API_KEY',
  'BASESCAN_API_KEY',
  'LZ_ENDPOINT_SEPOLIA',
  'LZ_ENDPOINT_BSC_TESTNET',
  'LZ_ENDPOINT_BASE_SEPOLIA'
];

// Verificar variables de entorno
function checkEnvVars() {
  console.log('üîç Verificando variables de entorno...');
  console.log('='.repeat(60));
  
  let allVarsPresent = true;
  
  for (const envVar of requiredEnvVars) {
    if (!process.env[envVar]) {
      console.error(`‚ùå Variable de entorno faltante: ${envVar}`);
      allVarsPresent = false;
    } else {
      console.log(`‚úÖ ${envVar}: ${envVar.includes('PRIVATE_KEY') ? '***MASKED***' : process.env[envVar]}`);
    }
  }
  
  // Verificar formato de la clave privada
  if (process.env.PRIVATE_KEY) {
    try {
      const wallet = new ethers.Wallet(process.env.PRIVATE_KEY);
      console.log('‚úÖ Formato de clave privada v√°lido');
      console.log(`   Direcci√≥n: ${wallet.address}`);
    } catch (error) {
      console.error('‚ùå Formato de clave privada inv√°lido');
      allVarsPresent = false;
    }
  }
  
  console.log('='.repeat(60));
  
  if (allVarsPresent) {
    console.log('‚úÖ Todas las variables de entorno est√°n configuradas correctamente');
  } else {
    console.error('‚ùå Faltan algunas variables de entorno requeridas');
    process.exit(1);
  }
}

// Verificar conexi√≥n a redes
async function checkNetworkConnections() {
  console.log('\nüåê Verificando conexiones a redes...');
  console.log('='.repeat(60));
  
  const networks = [
    { name: 'Ethereum Sepolia', url: process.env.SEPOLIA_RPC_URL },
    { name: 'BNB Chain Testnet', url: process.env.BSC_TESTNET_RPC_URL },
    { name: 'Base Sepolia', url: process.env.BASE_SEPOLIA_RPC_URL }
  ];
  
  for (const network of networks) {
    try {
      const provider = new JsonRpcProvider(network.url);
      const blockNumber = await provider.getBlockNumber();
      console.log(`‚úÖ ${network.name}: Conectado (Bloque #${blockNumber})`);
    } catch (error: any) {
      console.error(`‚ùå ${network.name}: Error de conexi√≥n - ${error.message}`);
    }
  }
  
  console.log('='.repeat(60));
}

// Verificar saldos en las redes
async function checkBalances() {
  if (!process.env.PRIVATE_KEY) return;
  
  console.log('\nüí∞ Verificando saldos...');
  console.log('='.repeat(60));
  
  const networks = [
    { name: 'Ethereum Sepolia', url: process.env.SEPOLIA_RPC_URL, symbol: 'ETH' },
    { name: 'BNB Chain Testnet', url: process.env.BSC_TESTNET_RPC_URL, symbol: 'BNB' },
    { name: 'Base Sepolia', url: process.env.BASE_SEPOLIA_RPC_URL, symbol: 'ETH' }
  ];
  
  const wallet = new Wallet(process.env.PRIVATE_KEY);
  
  for (const network of networks) {
    try {
      const provider = new JsonRpcProvider(network.url);
      const balance = await provider.getBalance(wallet.address);
      const formattedBalance = formatEther(balance);
      console.log(`üí∞ ${network.name}: ${formattedBalance} ${network.symbol}`);
      
      // Advertencia si el saldo es bajo
      if (parseFloat(formattedBalance) < 0.05) {
        console.warn(`   ‚ö†Ô∏è  Saldo bajo en ${network.name}. Se recomienda fondear la cuenta.`);
      }
    } catch (error: any) {
      console.error(`‚ùå Error al verificar saldo en ${network.name}: ${error.message}`);
    }
  }
  
  console.log('='.repeat(60));
}

// Funci√≥n principal
async function main() {
  console.log('üîß Verificaci√≥n de configuraci√≥n de despliegue');
  console.log('='.repeat(60));
  
  // Verificar variables de entorno
  checkEnvVars();
  
  // Verificar conexiones a redes
  await checkNetworkConnections();
  
  // Verificar saldos
  await checkBalances();
  
  console.log('\n‚úÖ Verificaci√≥n completada. El entorno est√° listo para el despliegue.');
}

main().catch((error) => {
  console.error('‚ùå Error durante la verificaci√≥n:', error);
  process.exit(1);
});
